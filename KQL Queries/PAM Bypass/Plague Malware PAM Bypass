let KnownGoodPAMHashes = dynamic([
  "C1A2B3C4D5E6F7A8B9C0D1E2F3A4B5C6D7E8F9A0",
  "1234567890ABCDEF1234567890ABCDEF12345678"
]);
let SuspiciousPAM = DeviceFileEvents
  | where Timestamp > ago(7d)
  | where FileName endswith "libselinux.so.8"
  | where ActionType in ("FileCreated", "FileCopied", "FileModified")
  | where SHA1 !in (KnownGoodPAMHashes)
  | project DeviceId, PAM_SHA1 = SHA1;
let LoadedBySSHD = DeviceImageLoadEvents
  | where Timestamp > ago(7d)
  | where FileName endswith "libselinux.so.8"
  | where InitiatingProcessFileName =~ "sshd"
  | project DeviceId, Loaded_PAM_SHA1 = SHA1;
let SSHFailures = DeviceLogonEvents
  | where Timestamp > ago(7d)
    and ActionType == "LogonFailed"
  | summarize FailCount = count() by DeviceId, AccountName, RemoteIP;
let SSHSuccess = DeviceLogonEvents
  | where Timestamp > ago(7d)
    and ActionType == "LogonSuccess"
  | project SuccessTime = Timestamp, DeviceId, AccountName, RemoteIP;
let StaticLoginBypass = SSHSuccess
  | join kind=leftanti SSHFailures
    on DeviceId, AccountName, RemoteIP;
let TraceEraser = DeviceProcessEvents
  | where Timestamp > ago(7d)
    and ( ProcessCommandLine contains "HISTFILE=/dev/null"
      or ProcessCommandLine contains "SSH_CONNECTION="
      or ProcessCommandLine contains "SSH_CLIENT=" )
  | project DeviceId, AccountName = InitiatingProcessAccountName, TraceTime = Timestamp;
let DetectionCore = StaticLoginBypass
  | join kind=inner SuspiciousPAM on DeviceId
  | join kind=inner LoadedBySSHD on DeviceId;
let WithDeviceInfo = DetectionCore
  | join kind=inner (DeviceInfo | project DeviceId, DeviceName) on DeviceId;
let PlagueBypassDetections = WithDeviceInfo
  | project DetectionTime = SuccessTime,
            DeviceId, DeviceName, AccountName, RemoteIP,
            PAM_File_Hash = Loaded_PAM_SHA1,
            Incident = "PLAGUE PAM bypass";
let TraceBypassWithDevice = TraceEraser
  // no IP in this trace event
  | extend RemoteIP = "", PAM_File_Hash = ""
  | join kind=inner (DeviceInfo | project DeviceId, DeviceName) on DeviceId
  | project DetectionTime = TraceTime,
            DeviceId, DeviceName, AccountName, RemoteIP, PAM_File_Hash,
            Incident = "Shell history eraser";
PlagueBypassDetections
| union kind=outer TraceBypassWithDevice


