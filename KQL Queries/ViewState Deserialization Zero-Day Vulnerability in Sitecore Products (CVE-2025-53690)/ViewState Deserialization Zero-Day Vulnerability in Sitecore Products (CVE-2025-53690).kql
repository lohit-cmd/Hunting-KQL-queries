// ViewState/ASP.NET deserialization â†’ code exec under IIS/SharePoint
// MITRE: T1190 (Exploit Public-Facing App), T1059 (Cmd/PS), T1105 (Exfil/C2)
let StartTime  = ago(7d);
let TimeWindow = 10m;
// ENV & TUNING 
let WebParents = dynamic(["w3wp.exe","aspnet_wp.exe","iisexpress.exe"]);
let SuspChildren = dynamic([
  "cmd.exe","powershell.exe","pwsh.exe","cscript.exe","wscript.exe","mshta.exe",
  "rundll32.exe","regsvr32.exe","msbuild.exe","installutil.exe","csc.exe",
  "certutil.exe","bitsadmin.exe","curl.exe","schtasks.exe","wmic.exe","msiexec.exe"
]);
let SuspCL = dynamic([
  "-enc","-encodedcommand","FromBase64String","IEX ","DownloadString",
  "Reflection.Assembly","::Load","/c ","-nop","-w hidden","-Command ","http://","https://","-urlcache"
]);
// SharePoint/IIS web roots 
let WebRootsRegex = @"(?i)\\inetpub\\wwwroot\\|\\www(root)?\\|\\vhosts\\|\\Web Server Extensions\\(15|16)\\TEMPLATE\\LAYOUTS\\";
let FarmWebRoots = dynamic([
  @"C:\inetpub\wwwroot\",
  @"C:\inetpub\wwwroot\wss\VirtualDirectories\80\",
  @"D:\SPContent\",
  @"C:\Program Files\Common Files\microsoft shared\Web Server Extensions\15\TEMPLATE\LAYOUTS\",
  @"C:\Program Files\Common Files\microsoft shared\Web Server Extensions\16\TEMPLATE\LAYOUTS\"
]);
let AspNetTempRegex = @"(?i)\\Windows\\Microsoft\.NET\\Framework(64)?\\v\d+(\.\d+)*\\Temporary ASP\.NET Files\\";
let SuspExt = dynamic(["aspx","ashx","asmx","config","dll","cs"]);
// Legit compiler/admin allow-list (no shells, app-pool scoped)
let AllowOnlyCompilers = dynamic(["csc.exe","vbc.exe","aspnet_compiler.exe","ngen.exe"]);
let AllowIISAdminTools = dynamic(["appcmd.exe","iisreset.exe"]);
let AllowedAppPools = dynamic([
  @"IIS APPPOOL\SharePoint - 80",
  @"IIS APPPOOL\SharePoint Central Administration v4"
]);
// Egress shaping (TTP-only, not IOC)
let EgressOkHosts = dynamic(["login.microsoftonline.com","packages.microsoft.com","download.visualstudio.microsoft.com"]);
// SIGNAL A: w3wp spawning shells/LOLBINs a strong indicator
let S1_Spawn =
DeviceProcessEvents
| where Timestamp between (StartTime .. now())
| where InitiatingProcessFileName in~ (WebParents)
| where FileName in~ (SuspChildren) or ProcessCommandLine has_any (SuspCL)
| where FileName !in~ ("conhost.exe","WerFault.exe")
// allow-list legitimate compiler/admin activity w/o suspicious flags
| where not(
    (FileName in~ (AllowOnlyCompilers) or FileName in~ (AllowIISAdminTools))
    and not(ProcessCommandLine has_any (SuspCL))
    and tostring(InitiatingProcessAccountName) in~ (AllowedAppPools)
  )
| extend Signal="SPAWN", SignalScore=2
| project DeviceId, DeviceName, Timestamp, Signal, SignalScore,
          WebProc=InitiatingProcessFileName,
          WebProcCmd=InitiatingProcessCommandLine,
          WebProcSHA1=InitiatingProcessSHA1,
          Account=InitiatingProcessAccountName,
          Child=FileName,
          ChildCmd=ProcessCommandLine,
          ChildSHA1=SHA1;
// SIGNAL B: w3wp writing into web-reachable paths (webshell/payload drop) 
let S2_WebWrite =
DeviceFileEvents
| where Timestamp between (StartTime .. now())
| where InitiatingProcessFileName in~ (WebParents)
| where ActionType in ("FileCreated","FileModified","FileRenamed","FileWritten")
| where (FolderPath has_any (FarmWebRoots) or FolderPath matches regex WebRootsRegex)
| where not(FolderPath matches regex AspNetTempRegex)
// derive extension from FileName
| extend Ext = tolower(coalesce(extract(@"(?i)\.([a-z0-9]+)$", 1, FileName), ""))
| where Ext in~ (SuspExt)
| extend Signal="WEBROOT_WRITE", SignalScore=2
| project DeviceId, DeviceName, Timestamp, Signal, SignalScore,
          WebProc=InitiatingProcessFileName,
          WebProcCmd=InitiatingProcessCommandLine,
          WebProcSHA1=InitiatingProcessSHA1,
          Account=InitiatingProcessAccountName,
          TargetFile=FileName,
          TargetPath=FolderPath;
// SIGNAL C: external egress from w3wp/child shortly after
let S3_Egress =
DeviceNetworkEvents
| where Timestamp between (StartTime .. now())
| where InitiatingProcessFileName in~ (array_concat(WebParents, dynamic(["cmd.exe","powershell.exe","pwsh.exe"])))
| where isnotempty(RemoteIP) and ipv4_is_private(RemoteIP) == false
| where Protocol =~ "Tcp" and RemotePort in (80,443,8080,8443)
| where isempty(RemoteUrl) or not(RemoteUrl has_any (EgressOkHosts))
| extend Signal="EXTERNAL_CONN", SignalScore=1
| project DeviceId, DeviceName, Timestamp, Signal, SignalScore,
          NetProc=InitiatingProcessFileName,
          NetProcCmd=InitiatingProcessCommandLine,
          RemoteIP, RemoteUrl, RemotePort, LocalPort;
// CORRELATION: require multi-signal behavior within a short window
let Signals = union S1_Spawn, S2_WebWrite, S3_Egress;
Signals
| extend WindowStart = bin(Timestamp, TimeWindow)
| summarize
    FirstSeen=min(Timestamp), LastSeen=max(Timestamp),
    Signals=make_set(Signal),
    Score=sum(SignalScore),
    WebProcs=make_set(WebProc),
    Accounts=make_set(Account),
    Spawned=make_set(Child),
    SpawnCmds=make_set(ChildCmd),
    WebWrites=make_set(TargetPath),
    RemoteIPs=make_set(RemoteIP),
    RemoteUrls=make_set(RemoteUrl)
  by DeviceId, DeviceName, WindowStart
| extend HasSpawn = array_length(set_intersect(Signals, dynamic(["SPAWN"]))) > 0,
         HasWrite = array_length(set_intersect(Signals, dynamic(["WEBROOT_WRITE"]))) > 0,
         HasEgr   = array_length(set_intersect(Signals, dynamic(["EXTERNAL_CONN"]))) > 0
// High-confidence logic (no IOCs):
| where (HasSpawn and (HasWrite or HasEgr)) or (HasWrite and HasEgr)
| where Score >= 3
| project
    Timestamp=FirstSeen,
    DeviceName,
    DeviceId,
    WindowStart,
    Signals,
    Score,
    WebProcs,
    Accounts,
    Spawned,
    SpawnCmds,
    WebWrites,
    RemoteIPs,
    RemoteUrls,
    LastSeen


